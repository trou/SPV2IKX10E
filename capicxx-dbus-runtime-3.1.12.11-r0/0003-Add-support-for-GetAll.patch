From 0ee640196553f29a4c476e3a4a919f1b097f0afc Mon Sep 17 00:00:00 2001
From: "Klein, Thorsten (BSH)" <thorsten.klein@bshg.com>
Date: Mon, 26 Nov 2018 17:50:31 +0100
Subject: [PATCH] Extend DBusObjectManager to use GetAll

The DBusObjectManager is specified by freedesktop to return as each
value in inner dict the same dict that would be returned by the
org.freedesktop.DBus.Properties.GetAll() method for that combination of
object path and interface. Only if an interface has no properties, an
empty dict will be returned.
---
 include/CommonAPI/DBus/DBusStubAdapter.hpp    |  3 ++
 .../CommonAPI/DBus/DBusStubAdapterHelper.hpp  | 52 ++++++++++---------
 src/CommonAPI/DBus/DBusObjectManagerStub.cpp  | 40 +++++++++-----
 3 files changed, 58 insertions(+), 37 deletions(-)

diff --git a/include/CommonAPI/DBus/DBusStubAdapter.hpp b/include/CommonAPI/DBus/DBusStubAdapter.hpp
index 882ec8f..5ce53dc 100644
--- a/include/CommonAPI/DBus/DBusStubAdapter.hpp
+++ b/include/CommonAPI/DBus/DBusStubAdapter.hpp
@@ -16,6 +16,7 @@
 #include <CommonAPI/Stub.hpp>
 #include <CommonAPI/DBus/DBusAddress.hpp>
 #include <CommonAPI/DBus/DBusInterfaceHandler.hpp>
+#include <CommonAPI/DBus/DBusOutputStream.hpp>
 
 namespace CommonAPI {
 namespace DBus {
@@ -47,6 +48,8 @@ class COMMONAPI_EXPORT_CLASS_EXPLICIT DBusStubAdapter
      COMMONAPI_EXPORT virtual bool hasFreedesktopProperties();
      COMMONAPI_EXPORT virtual bool onInterfaceDBusFreedesktopPropertiesMessage(const DBusMessage &_message) = 0;
 
+     COMMONAPI_EXPORT virtual bool appendGetAllReply(const DBusMessage& dbusMessage, DBusOutputStream& dbusOutputStream) = 0;
+
  protected:
     DBusAddress dbusAddress_;
     const std::shared_ptr<DBusProxyConnection> connection_;
diff --git a/include/CommonAPI/DBus/DBusStubAdapterHelper.hpp b/include/CommonAPI/DBus/DBusStubAdapterHelper.hpp
index d4252ab..072789c 100644
--- a/include/CommonAPI/DBus/DBusStubAdapterHelper.hpp
+++ b/include/CommonAPI/DBus/DBusStubAdapterHelper.hpp
@@ -76,6 +76,12 @@ class DBusStubAdapterHelper {
     (void) _isManaging;
     (void) _stub;
   }
+
+  bool appendGetAllReply(const DBusMessage& dbusMessage, DBusOutputStream& dbusOutputStream) {
+    (void) dbusMessage;
+    (void) dbusOutputStream;
+    return true;
+  }
 protected:
   bool findDispatcherAndHandle(const DBusMessage& dbusMessage, DBusInterfaceMemberPath& dbusInterfaceMemberPath) {
     (void) dbusMessage;
@@ -94,11 +100,6 @@ class DBusStubAdapterHelper {
     (void) _message;
     return false;
   }
-  bool appendGetAllReply(const DBusMessage& dbusMessage, DBusOutputStream& dbusOutputStream) {
-    (void) dbusMessage;
-    (void) dbusOutputStream;
-    return true;
-  }
 public:
   template <typename Stub_>
   void addStubDispatcher(DBusInterfaceMemberPath _dbusInterfaceMemberPath,
@@ -161,6 +162,27 @@ class DBusStubAdapterHelper<StubClass_, Stubs_...>:
         return remoteEventHandler_;
     }
 
+
+    bool appendGetAllReply(const DBusMessage& dbusMessage, DBusOutputStream& dbusOutputStream)
+    {
+        for(auto attributeDispatcherIterator = stubAttributeTable_.begin(); attributeDispatcherIterator != stubAttributeTable_.end(); attributeDispatcherIterator++) {
+
+            //To prevent the destruction of the stub whilst still handling a message
+            if (stub_) {
+                StubDispatcher<StubClass_>* getterDispatcher = attributeDispatcherIterator->second.getter;
+                if (NULL == getterDispatcher) { // all attributes have at least a getter
+                    COMMONAPI_ERROR(std::string(__FUNCTION__), "getterDispatcher == NULL");
+                    return false;
+                } else {
+                    dbusOutputStream.align(8);
+                    dbusOutputStream << attributeDispatcherIterator->first;
+                    getterDispatcher->appendGetAllReply(dbusMessage, stub_, dbusOutputStream);
+                }
+            }
+        }
+        return DBusStubAdapterHelper<Stubs_...>::appendGetAllReply(dbusMessage, dbusOutputStream);
+     }
+
  protected:
 
     virtual bool onInterfaceDBusMessage(const DBusMessage& dbusMessage) {
@@ -284,26 +306,6 @@ class DBusStubAdapterHelper<StubClass_, Stubs_...>:
         return setterDispatcher->dispatchDBusMessage(dbusMessage, stub_, getRemoteEventHandler(), getDBusConnection());
     }
 
-    bool appendGetAllReply(const DBusMessage& dbusMessage, DBusOutputStream& dbusOutputStream)
-    {
-        for(auto attributeDispatcherIterator = stubAttributeTable_.begin(); attributeDispatcherIterator != stubAttributeTable_.end(); attributeDispatcherIterator++) {
-
-            //To prevent the destruction of the stub whilst still handling a message
-            if (stub_) {
-                StubDispatcher<StubClass_>* getterDispatcher = attributeDispatcherIterator->second.getter;
-                if (NULL == getterDispatcher) { // all attributes have at least a getter
-                    COMMONAPI_ERROR(std::string(__FUNCTION__), "getterDispatcher == NULL");
-                    return false;
-                } else {
-                    dbusOutputStream.align(8);
-                    dbusOutputStream << attributeDispatcherIterator->first;
-                    getterDispatcher->appendGetAllReply(dbusMessage, stub_, dbusOutputStream);
-                }
-            }
-        }
-        return DBusStubAdapterHelper<Stubs_...>::appendGetAllReply(dbusMessage, dbusOutputStream);
-     }
-
  private:
 
    template <typename Stub_>
diff --git a/src/CommonAPI/DBus/DBusObjectManagerStub.cpp b/src/CommonAPI/DBus/DBusObjectManagerStub.cpp
index 226c825..7208c1a 100644
--- a/src/CommonAPI/DBus/DBusObjectManagerStub.cpp
+++ b/src/CommonAPI/DBus/DBusObjectManagerStub.cpp
@@ -307,43 +307,59 @@ bool DBusObjectManagerStub::onInterfaceDBusMessage(const DBusMessage& dbusMessag
     }
 
     std::lock_guard<std::mutex> dbusObjectManagerStubLock(dbusObjectManagerStubLock_);
-    DBusObjectPathAndInterfacesDict dbusObjectPathAndInterfacesDict;
 
-    for (const auto& registeredDBusObjectPathIterator : registeredDBusObjectPathsMap_) {
+    DBusMessage dbusMessageReply = dbusMessage.createMethodReturn("a{oa{sa{sv}}}");
+    DBusOutputStream dbusOutputStream(dbusMessageReply);
+	dbusOutputStream.beginWriteMap();
+
+    for (const auto& registeredDBusObjectPathIterator : registeredDBusObjectPathsMap_)
+    {
         const std::string& registeredDBusObjectPath = registeredDBusObjectPathIterator.first;
         const auto& registeredDBusInterfacesMap = registeredDBusObjectPathIterator.second;
-        DBusInterfacesAndPropertiesDict dbusInterfacesAndPropertiesDict;
 
         if (0 == registeredDBusObjectPath.length()) {
             COMMONAPI_ERROR(std::string(__FUNCTION__), " empty object path");
         } else {
+
             if (0 == registeredDBusInterfacesMap.size()) {
                 COMMONAPI_ERROR(std::string(__FUNCTION__), " empty interfaces map for ", registeredDBusObjectPath);
             }
 
-            for (const auto& registeredDBusInterfaceIterator : registeredDBusInterfacesMap) {
+            dbusOutputStream.align(8);
+            dbusOutputStream << registeredDBusObjectPath;
+            dbusOutputStream.beginWriteMap();
+
+            for (const auto& registeredDBusInterfaceIterator : registeredDBusInterfacesMap)
+            {
                 const std::string& registeredDBusInterfaceName = registeredDBusInterfaceIterator.first;
                 const auto& registeredDBusStubAdapter = registeredDBusInterfaceIterator.second.begin();
 
                 if (0 == registeredDBusInterfaceName.length()) {
                     COMMONAPI_ERROR(std::string(__FUNCTION__), " empty interface name for ", registeredDBusObjectPath);
                 } else {
-                    dbusInterfacesAndPropertiesDict.insert({ registeredDBusInterfaceName, DBusPropertiesChangedDict() });
+                    dbusOutputStream.align(8);
+                    dbusOutputStream << registeredDBusInterfaceName;
+                    dbusOutputStream.beginWriteMap();
+
+					(*registeredDBusStubAdapter)->appendGetAllReply(dbusMessage, dbusOutputStream);
+
+                    dbusOutputStream.endWriteMap();
                 }
 
-                if ((*registeredDBusStubAdapter)->isManaging()) {
-                    dbusInterfacesAndPropertiesDict.insert({ getInterfaceName(), DBusPropertiesChangedDict() });
+                if ((*registeredDBusStubAdapter)->isManaging())
+                {
+//                	dbusOutputStream.align(8);
+//                    dbusOutputStream << std::string(getInterfaceName());
+//                    dbusOutputStream << DBusPropertiesChangedDict();
+
                 }
             }
 
-            dbusObjectPathAndInterfacesDict.insert({ registeredDBusObjectPath, std::move(dbusInterfacesAndPropertiesDict) });
+            dbusOutputStream.endWriteMap();
         }
     }
 
-    DBusMessage dbusMessageReply = dbusMessage.createMethodReturn("a{oa{sa{sv}}}");
-    DBusOutputStream dbusOutputStream(dbusMessageReply);
-
-    dbusOutputStream << dbusObjectPathAndInterfacesDict;
+    dbusOutputStream.endWriteMap();
     dbusOutputStream.flush();
 
     const bool dbusMessageReplySent = dbusConnection->sendDBusMessage(dbusMessageReply);
